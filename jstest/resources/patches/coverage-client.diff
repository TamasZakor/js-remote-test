diff --git a/jerry-debugger/jerry_client.py b/jerry-debugger/jerry_client.py
index f5fd136..9522572 100755
--- a/jerry-debugger/jerry_client.py
+++ b/jerry-debugger/jerry_client.py
@@ -22,6 +22,8 @@ import socket
 import sys
 import logging
 import time
+import json
+import os
 import jerry_client_ws
 
 class DebuggerPrompt(Cmd):
@@ -104,105 +106,18 @@ class DebuggerPrompt(Cmd):
                             print(self.debugger.print_source(self.debugger.display,
                                                              self.debugger.src_offset).get_data())
                         args = int(args) - 1
-                    self.cmdloop()
+                    self.onecmd('c')
             except ValueError as val_errno:
                 print("Error: expected a positive integer: %s" % val_errno)
-                self.cmdloop()
+                self.onecmd('c')
     do_n = do_next
 
-    def do_step(self, _):
-        """ Next breakpoint, step into functions """
-        self.debugger.step()
-        self.stop = True
-    do_s = do_step
-
-    def do_backtrace(self, args):
-        """ Get backtrace data from debugger """
-        result = self.debugger.backtrace(args)
-        if self.debugger.not_empty(result):
-            print(result.get_data())
-            self.stop = True
-            self.cmdloop()
-        else:
-            self.stop = True
-            self.backtrace = True
-    do_bt = do_backtrace
-
-    def do_src(self, args):
-        """ Get current source code """
-        if args:
-            line_num = src_check_args(args)
-            if line_num >= 0:
-                print(self.debugger.print_source(line_num, 0).get_data())
-    do_source = do_src
-
-    def do_scroll(self, _):
-        """ Scroll the source up or down """
-        while True:
-            key = sys.stdin.readline()
-            if key == 'w\n':
-                _scroll_direction(self.debugger, "up")
-            elif key == 's\n':
-                _scroll_direction(self.debugger, "down")
-            elif key == 'q\n':
-                break
-            else:
-                print("Invalid key")
-
     def do_continue(self, _):
         """ Continue execution """
         self.debugger.get_continue()
         self.stop = True
-        if self.debugger.check_empty_data(self.debugger.non_interactive):
-            print("Press enter to stop JavaScript execution.")
     do_c = do_continue
 
-    def do_finish(self, _):
-        """ Continue running until the current function returns """
-        self.debugger.finish()
-        self.stop = True
-    do_f = do_finish
-
-    def do_dump(self, args):
-        """ Dump all of the debugger data """
-        if args:
-            print("Error: No argument expected")
-        else:
-            pprint(self.debugger.function_list)
-
-    def do_eval(self, args):
-        """ Evaluate JavaScript source code """
-        self.debugger.eval(args)
-        self.stop = True
-    do_e = do_eval
-
-    def do_memstats(self, _):
-        """ Memory statistics """
-        self.debugger.memstats()
-        self.stop = True
-    do_ms = do_memstats
-
-    def do_abort(self, args):
-        """ Throw an exception """
-        self.debugger.abort(args)
-        self.stop = True
-
-    def do_restart(self, _):
-        """ Restart the engine's debug session """
-        self.debugger.restart()
-        self.stop = True
-    do_res = do_restart
-
-    def do_throw(self, args):
-        """ Throw an exception """
-        self.debugger.throw(args)
-        self.stop = True
-
-    def do_exception(self, args):
-        """ Config the exception handler module """
-        result = self.debugger.exception(args)
-        print(result.get_data())
-
 def _scroll_direction(debugger, direction):
     """ Helper function for do_scroll """
     debugger.src_offset_diff = int(max(math.floor(debugger.display / 3), 1))
@@ -236,8 +151,9 @@ def main():
     prompt.prompt = "(jerry-debugger) "
     prompt.debugger.non_interactive = args.non_interactive
 
-    if args.color:
-        debugger.set_colors()
+    if os.path.isfile(args.coverage_output):
+        with open(args.coverage_output) as data:
+            prompt.debugger.coverage_info = json.load(data)
 
     if args.display:
         prompt.debugger.display = args.display
@@ -247,16 +163,15 @@ def main():
         if prompt.debugger.check_empty_data(args.client_source):
             prompt.debugger.mainloop()
             result = prompt.debugger.smessage
-            print(result)
+            #print(result)
             prompt.debugger.smessage = ''
-            prompt.cmdloop()
-
-    if  prompt.debugger.not_empty(args.exception):
-        prompt.do_exception(str(args.exception))
+            prompt.onecmd('c')
 
     if args.client_source:
         prompt.debugger.store_client_sources(args.client_source)
 
+    prompt.onecmd('c')
+
     while True:
         if prompt.quit:
             break
@@ -274,23 +189,25 @@ def main():
             if result.endswith('\n'):
                 result = result.rstrip()
             if result:
-                print(result)
                 prompt.debugger.smessage = ''
-            if prompt.debugger.display > 0:
-                print(prompt.debugger.print_source(prompt.debugger.display, prompt.debugger.src_offset).get_data())
             prompt.backtrace = False
             break
         else:
             if result.endswith('\n'):
                 result = result.rstrip()
             if result:
-                print(result)
                 prompt.debugger.smessage = ''
-            if prompt.debugger.display > 0:
-                print(prompt.debugger.print_source(prompt.debugger.display, prompt.debugger.src_offset).get_data())
-        prompt.cmdloop()
+        prompt.onecmd('c')
         continue
 
+    with open(args.coverage_output, 'w') as outfile:
+        for func_name in prompt.debugger.coverage_info:
+            breakpoints = prompt.debugger.coverage_info[func_name]
+            prompt.debugger.coverage_info[func_name] = {int(k) : v for k, v in breakpoints.items()}
+
+        json.dump(prompt.debugger.coverage_info, outfile)
+        print("Finished the execution.")
+
 if __name__ == "__main__":
     try:
         main()
diff --git a/jerry-debugger/jerry_client_ws.py b/jerry-debugger/jerry_client_ws.py
index 9a448dc..d38a2eb 100755
--- a/jerry-debugger/jerry_client_ws.py
+++ b/jerry-debugger/jerry_client_ws.py
@@ -24,7 +24,7 @@ import struct
 import sys
 
 # Expected debugger protocol version.
-JERRY_DEBUGGER_VERSION = 4
+JERRY_DEBUGGER_VERSION = 3
 JERRY_DEBUGGER_DATA_END = '\3'
 
 # Messages sent by the server to client.
@@ -114,6 +114,8 @@ def arguments_parse():
                         help="set exception config, usage 1: [Enable] or 0: [Disable]")
     parser.add_argument("--client-source", action="store", default=[], type=str, nargs="+",
                         help="specify a javascript source file to execute")
+    parser.add_argument("--coverage-output", action="store", default="coverage_output.json",
+                        help="specify the output file for coverage (default: %(default)s)")
 
     args = parser.parse_args()
 
@@ -276,6 +278,7 @@ class JerryDebugger(object):
         self.breakpoint_info = ''
         self.smessage = ''
         self.min_depth = 0
+        self.coverage_info = {}
 
         self.send_message(b"GET /jerry-debugger HTTP/1.1\r\n" +
                           b"Upgrade: websocket\r\n" +
@@ -368,18 +371,6 @@ class JerryDebugger(object):
     def stop(self):
         self.send_command(JERRY_DEBUGGER_STOP)
 
-    def finish(self):
-        self._exec_command(JERRY_DEBUGGER_FINISH)
-
-    def next(self):
-        self._exec_command(JERRY_DEBUGGER_NEXT)
-
-    def step(self):
-        self._exec_command(JERRY_DEBUGGER_STEP)
-
-    def memstats(self):
-        self._exec_command(JERRY_DEBUGGER_MEMSTATS)
-
     def set_break(self, args):
         if args == "":
             return DisplayData("break", "Error: Breakpoint index expected")
@@ -450,73 +441,6 @@ class JerryDebugger(object):
             result = result[:-1]
         return DisplayData("delete", result)
 
-    def backtrace(self, args):
-        max_depth = 0
-        self.min_depth = 0
-
-        if args:
-            args = args.split(" ")
-            try:
-                if len(args) == 2:
-                    self.min_depth = int(args[0])
-                    max_depth = int(args[1])
-                    if max_depth <= 0 or self.min_depth < 0:
-                        return DisplayData("backtrace", "Error: Positive integer number expected")
-                    if self.min_depth > max_depth:
-                        return DisplayData("backtrace", "Error: Start depth needs to be lower than or equal to max" \
-                                            " depth")
-
-                else:
-                    max_depth = int(args[0])
-                    if max_depth <= 0:
-                        return DisplayData("backtrace", "Error: Positive integer number expected")
-
-            except ValueError as val_errno:
-                return DisplayData("backtrace", "Error: Positive integer number expected, %s" % (val_errno))
-
-        message = struct.pack(self.byte_order + "BBIB" + self.idx_format + self.idx_format,
-                              WEBSOCKET_BINARY_FRAME | WEBSOCKET_FIN_BIT,
-                              WEBSOCKET_FIN_BIT + 1 + 4 + 4,
-                              0,
-                              JERRY_DEBUGGER_GET_BACKTRACE,
-                              self.min_depth,
-                              max_depth)
-        self.send_message(message)
-
-    def eval(self, code):
-        self._send_string(JERRY_DEBUGGER_EVAL_EVAL + code, JERRY_DEBUGGER_EVAL)
-
-    def throw(self, code):
-        self._send_string(JERRY_DEBUGGER_EVAL_THROW + code, JERRY_DEBUGGER_EVAL)
-
-    def abort(self, args):
-        self.delete("all")
-        self.exception("0")  # disable the exception handler
-        self._send_string(JERRY_DEBUGGER_EVAL_ABORT + args, JERRY_DEBUGGER_EVAL)
-
-    def restart(self):
-        self._send_string(JERRY_DEBUGGER_EVAL_ABORT + "\"r353t\"", JERRY_DEBUGGER_EVAL)
-
-    def exception(self, args):
-        try:
-            enabled = int(args)
-        except (ValueError, TypeError) as val_errno:
-            return DisplayData("exception", "Error: Positive integer number expected, %s" % (val_errno))
-
-        if enabled not in [0, 1]:
-            return DisplayData("delete", "Error: Invalid input! Usage 1: [Enable] or 0: [Disable].")
-
-        if enabled:
-            logging.debug("Stop at exception enabled")
-            self.send_exception_config(enabled)
-
-            return DisplayData("exception", "Stop at exception enabled")
-
-        logging.debug("Stop at exception disabled")
-        self.send_exception_config(enabled)
-
-        return DisplayData("exception", "Stop at exception disabled")
-
     def _send_string(self, args, message_type):
         size = len(args)
 
@@ -627,15 +551,6 @@ class JerryDebugger(object):
                               enable)
         self.send_message(message)
 
-    def set_colors(self):
-        self.nocolor = '\033[0m'
-        self.green = '\033[92m'
-        self.red = '\033[31m'
-        self.yellow = '\033[93m'
-        self.green_bg = '\033[42m\033[30m'
-        self.yellow_bg = '\033[43m\033[30m'
-        self.blue = '\033[94m'
-
     def send_message(self, message):
         size = len(message)
         while size > 0:
@@ -738,6 +653,17 @@ class JerryDebugger(object):
                                JERRY_DEBUGGER_FUNCTION_NAME_END]:
                 _parse_source(self, data)
 
+                for key in self.function_list:
+                    function = self.function_list[key]
+                    lines = function.lines
+
+                    if str(function.source_name) not in self.coverage_info:
+                        self.coverage_info[str(function.source_name)] = {}
+
+                    for breakpoint in lines.values():
+                        if str(breakpoint.line) not in self.coverage_info[str(function.source_name)]:
+                            self.coverage_info[function.source_name][str(breakpoint.line)] = False
+
             elif buffer_type == JERRY_DEBUGGER_WAITING_AFTER_PARSE:
                 self.send_command(JERRY_DEBUGGER_PARSER_RESUME)
 
@@ -766,7 +692,13 @@ class JerryDebugger(object):
                 if self.breakpoint_info != '':
                     result += self.breakpoint_info + '\n'
                     self.breakpoint_info = ''
+
                 result += "Stopped %s %s" % (breakpoint_info, breakpoint[0])
+
+                self.coverage_info[str(breakpoint[0].function.source_name)][str(breakpoint[0].line)] = True
+                if breakpoint[0].active_index >= 0:
+                   self.delete(str(breakpoint[0].active_index))
+
                 self.smessage = result
                 return DisplayData("break/exception", self.smessage)
 
@@ -776,42 +708,6 @@ class JerryDebugger(object):
             elif buffer_type == JERRY_DEBUGGER_EXCEPTION_STR_END:
                 exception_string += data[3:]
 
-            elif buffer_type in [JERRY_DEBUGGER_BACKTRACE, JERRY_DEBUGGER_BACKTRACE_END]:
-                if self.min_depth != 0:
-                    frame_index = self.min_depth
-                else:
-                    frame_index = 0
-
-                while True:
-
-                    buffer_pos = 3
-                    while buffer_size > 0:
-                        breakpoint_data = struct.unpack(self.byte_order + self.cp_format + self.idx_format,
-                                                        data[buffer_pos: buffer_pos + self.cp_size + 4])
-
-                        breakpoint = _get_breakpoint(self, breakpoint_data)
-
-                        result += "Frame %d: %s" % (frame_index, breakpoint[0])
-
-                        frame_index += 1
-                        buffer_pos += 6
-                        buffer_size -= 6
-                        if buffer_size > 0:
-                            result += '\n'
-
-                    if buffer_type == JERRY_DEBUGGER_BACKTRACE_END:
-                        break
-
-                    data = self.get_message(True)
-                    buffer_type = ord(data[2])
-                    buffer_size = ord(data[1]) - 1
-
-                    if buffer_type not in [JERRY_DEBUGGER_BACKTRACE,
-                                           JERRY_DEBUGGER_BACKTRACE_END]:
-                        raise Exception("Backtrace data expected")
-                self.smessage = result
-                return DisplayData("backtrace", self.smessage)
-
             elif buffer_type in [JERRY_DEBUGGER_EVAL_RESULT,
                                  JERRY_DEBUGGER_EVAL_RESULT_END,
                                  JERRY_DEBUGGER_OUTPUT_RESULT,
@@ -856,62 +752,11 @@ class JerryDebugger(object):
                     self.smessage = result
                     return DisplayData("eval_result", self.smessage)
 
-            elif buffer_type == JERRY_DEBUGGER_MEMSTATS_RECEIVE:
-
-                memory_stats = struct.unpack(self.byte_order + self.idx_format *5,
-                                             data[3: 3 + 4 *5])
-
-                result += "Allocated bytes: %s\n" % memory_stats[0]
-                result += "Byte code bytes: %s\n" % memory_stats[1]
-                result += "String bytes: %s\n" % memory_stats[2]
-                result += "Object bytes: %s\n" % memory_stats[3]
-                result += "Property bytes: %s\n" % memory_stats[4]
-
-                self.smessage = str(result)
-                return DisplayData("memstats", self.smessage)
-
             elif buffer_type == JERRY_DEBUGGER_WAIT_FOR_SOURCE:
                 self.send_client_source()
             else:
                 raise Exception("Unknown message")
 
-    def print_source(self, line_num, offset):
-        msg = ''
-        last_bp = self.last_breakpoint_hit
-
-        if not last_bp:
-            return None
-
-        lines = last_bp.function.source
-        if last_bp.function.source_name:
-            msg += "Source: %s\n" % (last_bp.function.source_name)
-
-        if line_num == 0:
-            start = 0
-            end = len(last_bp.function.source)
-        else:
-            start = max(last_bp.line - line_num, 0)
-            end = min(last_bp.line + line_num - 1, len(last_bp.function.source))
-            if offset:
-                if start + offset < 0:
-                    self.src_offset += self.src_offset_diff
-                    offset += self.src_offset_diff
-                elif end + offset > len(last_bp.function.source):
-                    self.src_offset -= self.src_offset_diff
-                    offset -= self.src_offset_diff
-
-                start = max(start + offset, 0)
-                end = min(end + offset, len(last_bp.function.source))
-
-        for i in range(start, end):
-            if i == last_bp.line - 1:
-                msg += "%s%4d%s %s>%s %s\n" % (self.green, i + 1, self.nocolor, self.red, \
-                                                         self.nocolor, lines[i])
-            else:
-                msg += "%s%4d%s   %s\n" % (self.green, i + 1, self.nocolor, lines[i])
-        msg = msg[:-1]
-        return DisplayData("print_source", msg)
-
     def not_empty(self, args):
         if args is not None:
             return True
